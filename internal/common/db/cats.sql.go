// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: cats.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCat = `-- name: CreateCat :exec
INSERT INTO cats (
  id, created_at, name, years_of_experience, breed, salary
) VALUES (
  $1, $2, $3, $4, $5, $6
)
`

type CreateCatParams struct {
	ID                pgtype.UUID
	CreatedAt         pgtype.Timestamp
	Name              string
	YearsOfExperience int16
	Breed             string
	Salary            int16
}

func (q *Queries) CreateCat(ctx context.Context, arg CreateCatParams) error {
	_, err := q.db.Exec(ctx, createCat,
		arg.ID,
		arg.CreatedAt,
		arg.Name,
		arg.YearsOfExperience,
		arg.Breed,
		arg.Salary,
	)
	return err
}

const getCat = `-- name: GetCat :one
SELECT id, created_at, name, years_of_experience, breed, salary FROM cats
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCat(ctx context.Context, id pgtype.UUID) (Cat, error) {
	row := q.db.QueryRow(ctx, getCat, id)
	var i Cat
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.YearsOfExperience,
		&i.Breed,
		&i.Salary,
	)
	return i, err
}

const listCats = `-- name: ListCats :many
SELECT id, created_at, name, years_of_experience, breed, salary FROM cats
ORDER BY created_at
`

func (q *Queries) ListCats(ctx context.Context) ([]Cat, error) {
	rows, err := q.db.Query(ctx, listCats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cat
	for rows.Next() {
		var i Cat
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.YearsOfExperience,
			&i.Breed,
			&i.Salary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
